#   mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
#   cbind(site=5) %>% cbind(name="McNutt")%>%
#   mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
#   filter(Exclude==0)
#
# s6  %<>% mutate(DateTime=as.POSIXct(strptime(DateTime,
#                                              format='%m/%d/%Y %H:%M',
#                                              tz="UTC"))) %>%
#   rename(WaterLevel=Actual_depth) %>%
#   mutate(day=floor_date(DateTime, unit="day")) %>%
#   mutate(month=floor_date(DateTime, unit="month")) %>%
#   mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
#   cbind(site=6) %>% cbind(name="Tallassee")%>%
#   mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
#   filter(Exclude==0)
s7  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>%
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>%
mutate(month=floor_date(DateTime, unit="month")) %>%
mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
cbind(site=7) %>% cbind(name="Tanyard")%>%
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0)
s8  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>%
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>%
mutate(month=floor_date(DateTime, unit="month")) %>%
mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
cbind(site=8) %>% cbind(name="Trail")%>%
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0)
s9  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>%
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>%
mutate(month=floor_date(DateTime, unit="month")) %>%
mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
cbind(site=9) %>% cbind(name="Shoal")%>%
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0)
s10  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>%
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>%
mutate(month=floor_date(DateTime, unit="month")) %>%
mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
cbind(site=10) %>% cbind(name="Turkey")%>%
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0)
# s11  %<>% mutate(DateTime=gsub("/", "-", DateTime)) %>%
#   mutate(DateTime=as.POSIXct(DateTime)) %>%
#   rename(WaterLevel=Actual_depth) %>%
#   mutate(day=floor_date(DateTime, unit="day")) %>%
#   mutate(month=floor_date(DateTime, unit="month")) %>%
#   mutate(quarter=floor_date(DateTime, unit="quarter")) %>%
#   cbind(site=11) %>% cbind(name="Big")%>%
#   mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
#   filter(Exclude==0)
rows <- c("name", "site", "DateTime", "Abs.Pres", "Temp", "WaterLevel", "Barom.Pres", "day", "hour_of_day")
stageDat <- rbind(s1  %>% subset(select=rows),
s2  %>% subset(select=rows),
s3  %>% subset(select=rows),
# s4  %>% subset(select=rows),
# s5  %>% subset(select=rows),
# s6  %>% subset(select=rows),
s7  %>% subset(select=rows),
s8  %>% subset(select=rows),
s9  %>% subset(select=rows),
s10  %>% subset(select=rows)#,
#s11  %>% subset(select=rows)
)
kable(filter(stageDat, WaterLevel<0) %>%
select(name, DateTime, WaterLevel), caption = "Instances of negative water level observations removed prior to analysis. ")
stageDat %<>% filter(WaterLevel>0) %>% mutate(name=as.character(name))
# read data from analysis.Rmd
fullDat2 <- read_csv("waterQualStanVars.csv")
fullDat2 %<>% mutate(by30=floor_date(DateTime, unit="30 min")) %>%
mutate(by15=floor_date(DateTime, unit="15 min")) %>%
select(by15, by30, name, Cond, Temp, SPC, stdCond, stdSpc, stdTemp)
stageDat %<>% mutate(by30=floor_date(DateTime, unit="30 min")) %>%
mutate(by15=floor_date(DateTime, unit="15 min")) %>%
select(by15, by30, name, WaterLevel)
fullDat3 <- full_join(fullDat2, stageDat)
# write_csv(fullDat3, "joined_cond_stage_height.csv")
dStats <- stageDat %>%
group_by(name) %>%
summarise(mean_water=mean(WaterLevel, na.rm=T),
sd_water=sd(WaterLevel, na.rm=T))
kable(dStats,
caption = "Mean and SD for water level and barom by  by site. ",
digits=2)
ggplot(stageDat, aes(x=hour(by15), y=WaterLevel, color=name)) +
geom_smooth() +
facet_wrap(~ name,scales = "free_y") +
labs(x="Hour", y="Water Level") +
theme(legend.position="none")
?hour
minute(fullDat3$by15[1])
minute(fullDat3$by15[2])
minute(fullDat3$by15[7])
hour(fullDat3$by15[2])
unique(fullDat3$by15)
unique(minute(fullDat3$by15))
unique(minute(fullDat3$by15))/60
fullDat3 %<>% mutate(hour.min=paste0(hour(by15), minute(by15)/60, sep="."))
View(fullDat3)
as.character(0.75)
as.character(0.75)[-1]
as.character(0.75)
stri_sub(as.character(0.75),2)
library(stringi)
stri_sub(as.character(0.75),2)
fullDat3 %<>% mutate(hour.min=paste0(hour(by15),
stri_sub(as.character(minute(by15)/60), 2), sep="."))
fullDat3 %<>% mutate(hour.min=paste0(hour(by15), ".",
stri_sub(as.character(minute(by15)/60), 2)))
fullDat3 %<>% mutate(hour.min=paste0(hour(by15), ".",
stri_sub(as.character(minute(by15)/60), 2)))
head(fullDat3)
View(fullDat3)
fullDat3 %<>% mutate(hour.min=paste0(hour(by15), ".",
stri_sub(as.character(minute(by15)/60), 3)))
head(fullDat3)
View(fullDat3)
fullDat3 %<>% mutate(hour.min=paste0(hour(by15), ".",
stri_sub(as.character(minute(by15)/60), 3))) %>%
mutate(hour.min=as.numeric(hour.min))
View(fullDat3)
tmp <- fullDat3 %>%
ggplot(aes(by1, SPC, group=name)) +
geom_smooth()
SPC <- fullDat3 %>%
ggplot(aes(by1, SPC, group=name)) +
geom_smooth()
SPC <- fullDat3 %>%
ggplot(aes(hour.min, SPC, group=name)) +
geom_smooth()
str(SPC)
SPC <- ggplot_build(SPC)$data[[1]] %>%
select(x, y, group)
str(SPC
)
SPC <- ggplot_build(SPC)$data[[1]] %>%
select(x, y, group) %>%
rename(hour.min=x, stdCond=y, site=group)
SPC <- fullDat3 %>%
ggplot(aes(hour.min, SPC, group=name)) +
geom_smooth()
SPC <- ggplot_build(SPC)$data[[1]] %>%
select(x, y, group) %>%
rename(hour.min=x, stdCond=y, site=group)
str(SPC)
SPC <- fullDat3 %>%
ggplot(aes(hour.min, SPC, group=name)) +
geom_smooth()
SPC <- ggplot_build(SPC)$data[[1]] %>%
select(x, y, group) %>%
rename(hour.min=x, SPC=y, site=group)
str(SPC)
unique(SPC$hour.min)
24*4
WaterLevel <- fullDat3 %>%
ggplot(aes(hour.min, WaterLevel, group=name)) +
geom_smooth()
WaterLevel <- ggplot_build(WaterLevel)$data[[1]] %>%
select(x, y, group) %>%
rename(hour.min=x, WaterLevel=y, site=group)
test=WaterLevel %>%
filter(site==1)
str(test)
WaterLevel %>%
filter(site==1) %>%
group_by(hour.min) %>%
ggplot(aes(x=hour.min, y=WaterLevel)) +
geom_smooth()
WaterLevel %>%
group_by(hour.min) %>%
ggplot(aes(x=hour.min, y=WaterLevel, color=site)) +
geom_smooth() +
facet_wrap(~ name,scales = "free_y") +
labs(x="Hour", y="Water Level") +
theme(legend.position="none")
WaterLevel %>%
group_by(hour.min) %>%
ggplot(aes(x=hour.min, y=WaterLevel, color=site)) +
geom_smooth() +
facet_wrap(~ site, scales = "free_y") +
labs(x="Hour", y="Water Level") +
theme(legend.position="none")
WaterLevel %>%
group_by(hour.min) %>%
ggplot(aes(x=hour.min, y=WaterLevel, color=factor(site))) +
geom_smooth() +
facet_wrap(~ site, scales = "free_y") +
labs(x="Hour", y="Water Level") +
theme(legend.position="none")
WaterLevel <- fullDat3 %>%
ggplot(aes(hour.min, WaterLevel, group=name)) +
geom_smooth()
WaterLevel <- ggplot_build(WaterLevel)$data[[1]] %>%
select(x, y, group) %>%
rename(hour.min=x, WaterLevel=y, site=group) %>%
arrange(hour.min)
View(waterLevel)
View(WaterLevel)
SPC <- fullDat3 %>%
ggplot(aes(hour.min, SPC, group=name)) +
geom_smooth()
SPC <- ggplot_build(SPC)$data[[1]] %>%
select(x, y, group) %>%
rename(hour.min=x, SPC=y, site=group)%>%
arrange(hour.min)
head(SPC)
head(WaterLevel)
spc.site1 <- filter(SPC, site==1)
wat.site1 <- filter(WaterLevel, site==1)
ccf(spc.site1$SPC, wat.site1$WaterLevel, na.action = na.pass)
ccf(diff(spc.site1$SPC), diff(wat.site1$WaterLevel), na.action = na.pass)
ccf(diff(spc.site1$SPC), diff(wat.site1$WaterLevel), na.action = na.pass, lag=100)
ccf(diff(spc.site1$SPC), diff(wat.site1$WaterLevel), na.action = na.pass, lag=50)
15*4*5
15*4*1
4*3
ccf(diff(spc.site1$SPC), diff(wat.site1$WaterLevel), na.action = na.pass, lag=12)
ccf(diff(wat.site1$WaterLevel), diff(spc.site1$SPC), na.action = na.pass, lag=12)
(devtools::install_github("daattali/ezknitr"))
library(devtools)
install.packages("devtools")
install.packages
install.packages(ezknitr)
install.packages("ezknitr")
setwd("~/Desktop/streamHealth")
brooklyn   <- s1  <-  read_csv("rawData/conductivity/Brooklyn.all.csv")
knitr::opts_chunk$set(fig.path='figures/', cache=TRUE,
fig.height = 8, message=FALSE, warning=FALSE, echo=FALSE)
# Load some helpful R packages
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
library(readr)
library(xts)
library(xtable)
library(knitr)
library(astsa)
knitr::opts_chunk$set(fig.path='watLevFigures/', cache=TRUE,
fig.height = 8, message=FALSE, warning=FALSE, echo=FALSE)
# Load some helpful R packages
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
library(readr)
library(xts)
library(xtable)
library(knitr)
library(astsa)
library(FitAR)
library(stringi)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
setwd("~/Desktop/streamHealth/rawData/conductivity")
fullDat2 <- read_csv("waterQualStanVars.csv")
setwd("~/Desktop/streamHealth/analysis")
fullDat2 <- read_csv("waterQualStanVars.csv")
fullDat2 <- read.csv("waterQualStanVars.csv")
colnames(fulLDat2)
colnames(fullDat2)
head(fullDat2)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
install.packages(GGAlly)
install.packages("GGally")
library(GGally)
knitr::opts_chunk$set(fig.path='condFigures/', cache=TRUE,
fig.height = 8, message=FALSE, warning=FALSE, echo=FALSE)
# Load some helpful R packages
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
library(readr)
library(xts)
library(xtable)
library(knitr)
library(astsa)
install.packages("astsa")
library(astsa)
setwd("C:/Users/Emily/Desktop/streamStats/analysis")
brooklyn-clean   <- s1  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brooklyn_all-cln.csv")
brooklyn.clean   <- s1  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brooklyn_all-cln.csv")
carr.clean       <- s2  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_carr_all-cln.csv")
bear.clean       <- s3  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_bear_emily-cln.csv")
brick      <- s4  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brickyard_john.csv")
mcnutt     <- s5  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_mcnutt_john.csv")
tallassee  <- s6  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_tallassee_john.csv")
tanyard.clean    <- s7  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_tanyard_emily-cln.csv")
trail.clean      <- s8  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_trail_emily-cln.csv")
shoal.clean      <- s9  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-cleancond_shoal_all-cln.csv")
shoal.clean      <- s9  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-cleancond/shoal_all-cln.csv")
shoal.clean      <- s9  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_shoal_all-cln.csv")
turkey.clean     <- s10 <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_turkey_all-cln.csv")
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0) # Take out known logger errors
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0) # Take out known logger errors
View(s1)
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0) %>% # Take out known logger errors
mutate(Exclude2 = ifelse(is.na(Exclude2),0,Exclude2)) %>%
filter(Exclude2==0) # Subsetting data for handpicked "good" data
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0) %>% # Take out known logger errors
View(s1)
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0) %>% # Take out known logger errors
View(s1)
knitr::opts_chunk$set(fig.path='condFigures/', cache=TRUE,
fig.height = 8, message=FALSE, warning=FALSE, echo=FALSE)
# Load some helpful R packages
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
library(readr)
library(xts)
library(xtable)
library(knitr)
library(astsa)
library(TSclust)
install.packages("TSclust")
library(TSclust)
setwd("~/Documents/streamHealth/rawData/conductivity")
setwd("C:/Users/Emily/Desktop/streamStats/analysis")
brooklyn-clean   <- s1  <-  read_csv("cond_brooklyn_all-cln.csv")
brooklyn-clean   <- s1  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brooklyn_all-cln.csv")
brooklyn.clean   <- s1  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brooklyn_all-cln.csv")
View(s1)
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0)
str(s1)
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) #%>% # Changing into POSIXct class
knitr::opts_chunk$set(fig.path='condFigures/', cache=TRUE,
fig.height = 8, message=FALSE, warning=FALSE, echo=FALSE)
# Load some helpful R packages
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
library(readr)
library(xts)
library(xtable)
library(knitr)
library(astsa)
library(TSclust)
setwd("C:/Users/Emily/Desktop/streamStats/analysis")
brooklyn.clean   <- s1  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brooklyn_all-cln.csv")
brooklyn.clean   <- s1  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brooklyn_all-cln.csv")
carr.clean       <- s2  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_carr_all-cln.csv")
bear.clean       <- s3  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_bear_emily-cln.csv")
brick      <- s4  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_brickyard_john.csv")
mcnutt     <- s5  <-  read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_mcnutt_john.csv")
tallassee  <- s6  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_tallassee_john.csv")
tanyard.clean    <- s7  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_tanyard_emily-cln.csv")
trail.clean      <- s8  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_trail_emily-cln.csv")
shoal.clean      <- s9  <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_shoal_all-cln.csv")
turkey.clean     <- s10 <- read_csv("C:/Users/Emily/Desktop/streamStats/analysis/condData-clean/cond_turkey_all-cln.csv")
str(S1)
str(s1)
View(s1)
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) #%>% # Changing into POSIXct class
s1  %<>% as.Date(mutate(DateTime=as.POSIXct(DateTime))) #%>% # Changing into POSIXct class
s1  %<>% as.POSIXct(DateTime) #%>% # Changing into POSIXct class
s1  %<>% as.POSIXct(s1$DateTime) #%>% # Changing into POSIXct class
s1  %<>% mutate(s1$DateTime=as.POSIXct(s1$DateTime))) #%>% # Changing into POSIXct class
knitr::opts_chunk$set(fig.path='condFigures/', cache=TRUE,
fig.height = 8, message=FALSE, warning=FALSE, echo=FALSE)
# Load some helpful R packages
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
library(grid)
library(tidyverse)
library(magrittr)
library(stringr)
library(GGally)
library(readr)
library(xts)
library(xtable)
library(knitr)
library(astsa)
library(TSclust)
s1  %<>% mutate(s1$DateTime=as.POSIXct(s1$DateTime))) #%>% # Changing into POSIXct class
s1  %<>% mutate(DateTime=as.POSIXct(DateTime))) #%>% # Changing into POSIXct class
s1  %<>% mutate(DateTime=as.POSIXct(DateTime)) #%>% # Changing into POSIXct class
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>% # DateTime w/0 H:M
mutate(month=floor_date(DateTime, unit="month")) %>% # DateTime rounded to month
mutate(monthVal=month(DateTime)) %>%
cbind(site=1) %>% cbind(name="Brooklyn") %>% # Name & Number of site
mutate(SPC=as.numeric(SPC)) %>% # SPC reads as a character otherwise?
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0) #%>% # Take out known logger errors
s2  %<>% mutate(DateTime=as.POSIXct(DateTime)) %>%
mutate(hour_of_day=floor_date(DateTime, unit="hour")) %>%
mutate(day=floor_date(DateTime, unit="day")) %>%
mutate(month=floor_date(DateTime, unit="month")) %>%
mutate(monthVal=month(DateTime)) %>%
cbind(site=2) %>% cbind(name="Carr") %>%
mutate(SPC=as.numeric(SPC))%>%
mutate(Exclude = ifelse(is.na(Exclude),0,Exclude)) %>%
filter(Exclude==0)
s1  %<>% mutate(DateTime=as.POSIXct(DateTime))# %>% # Changing into POSIXct class
